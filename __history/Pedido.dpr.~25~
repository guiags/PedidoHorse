program Pedido;

{$APPTYPE CONSOLE}

{$R *.res}

uses Horse, System.JSON, Data.DB, System.Classes, Horse.Jhonson, Horse.Commons, System.SysUtils, Horse.BasicAuthentication, FireDAC.Phys.FB, FireDAC.Comp.Client, FireDAC.Stan.Def, FireDAC.DApt, FireDAC.Stan.Async;


var Users: TJSONArray;
  Produtos: TJSONArray;
  Produto: TJSONObject;
  FDConnection1: TFDConnection;
  FDQuery1: TFDQuery;

procedure createConnection(FDConnection1 : TFDConnection);
  begin
    FDConnection1.DriverName := 'FB';
    FDConnection1.Params.Add('Database=C:\Users\guilh\Documents\Firebird\DADOS.fdb');
    FDConnection1.Params.Add('User_Name=SYSDBA');
    FDConnection1.Params.Add('Password=masterkey');
    FDConnection1.Params.Add('Server=localhost');
    FDConnection1.Connected := True;
  end;



begin


  THorse.Use(Jhonson);
  THorse.Use(HorseBasicAuthentication(
    function(const AUsername, APassword: string): Boolean
    begin
      // Here inside you can access your database and validate if username and password are valid
      Result := AUsername.Equals('user') and APassword.Equals('password');
    end));


  Users:= TJSONArray.Create;
  Produtos:= TJSONArray.Create;

  THorse.Get('/produtos',
    procedure(Req: THorseRequest; Res: THorseResponse)
    begin
        try
          FDConnection1 := TFDConnection.Create(nil);
          FDQuery1 := TFDQuery.Create(nil);
          createConnection(FDConnection1);
          FDQuery1.Connection := FDConnection1;
          FDQuery1.SQL.Text := 'SELECT * FROM PRODUTOS';
          FDQuery1.Open;
          Produtos:= TJSONArray.Create;
          FDQuery1.First;
          while not FDQuery1.Eof do
            begin
              Produto:= TJSONObject.Create;
              try
                //Produto:= TJSONObject.Create;
                Produto.AddPair('ID', FDQuery1.FieldByName('ID').AsString);
                Produto.AddPair('DESCRICAO', FDQuery1.FieldByName('DESCRICAO').AsString);
                Produto.AddPair('QTDESTOQUE', FDQuery1.FieldByName('QTDESTOQUE').AsString);
                Produto.AddPair('PRECO', FDQuery1.FieldByName('PRECO').AsString);
                Produtos.AddElement(Produto);
                //Produto.Free;
              except
                Produto.Free;
                raise;
              end;
              FDQuery1.Next;
             end;
          //FDQuery1.Next;
        Res.Send<TJSONArray>(Produtos).Status(THTTPStatus.OK);
        //FDQuery1.Free;
        //FDConnection1.Free;
        //produtos.Free;
        finally
          //FDQuery1.Free;
        end;
    end);

  THorse.Post('/users',
    procedure(Req: THorseRequest; Res: THorseResponse)
    var
      User : TJSONObject;
    begin
      User := Req.Body<TJSONObject>.Clone as TJSONObject;
      Users.AddElement(User);
      Res.Send<TJSONAncestor>(User.Clone).Status(THTTPStatus.Created);
    end);

  THorse.Delete('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse)
    var
      Id: integer;
    begin
      id := Req.Params.Items['id'].ToInteger;
      Users.Remove(Pred(Id)).Free;
      Res.Send<TJSONAncestor>(Users.Clone).Status(THTTPStatus.NoContent);
    end);

  THorse.Listen(9000);

  //finally
    //writeln('Erro ao conectar');
  //end;

end.

